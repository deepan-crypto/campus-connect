generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  name              String
  role              String
  password          String
  createdAt         DateTime       @default(now())
  profile           Profile?
  posts             Post[]
  likes             Like[]
  comments          Comment[]
  conversations     Conversation[] @relation("ConversationParticipants")
  sentMessages      Message[]      @relation("SentMessages")
  sentConnections   Connection[]   @relation("ConnectionRequester")
  receivedConnections Connection[]  @relation("ConnectionReceiver")
}

model Profile {
  id        String  @id @default(uuid())
  bio       String?
  avatarUrl String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Post {
  id          String    @id @default(uuid())
  title       String?
  content     String
  imageUrl    String?
  postType    String    @default("post") // Can be "post" or "announcement"
  visibility  String?   @default("public") // e.g., "public", "private", "faculty-only"
  tags        String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Conversation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  eventType   String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  capacity    Int?
  bannerUrl   String?
  tags        String[] @default([])
  createdBy   String
}

model Connection {
  id          String   @id @default(uuid())
  status      String   // "pending", "accepted", "rejected"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  requester   User     @relation("ConnectionRequester", fields: [requesterId], references: [id])
  requesterId String
  receiver    User     @relation("ConnectionReceiver", fields: [receiverId], references: [id])
  receiverId  String

  @@unique([requesterId, receiverId])
}




